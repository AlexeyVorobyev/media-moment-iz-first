import cv2
import numpy as np

from AbstractTracker import AbstractTracker, bounding_box_type
from dft import fft_2d, ifft_2d


class CSK(AbstractTracker):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ CSK (Continuous Sparse Kernel) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.

    –ê–ª–≥–æ—Ä–∏—Ç–º CSK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —è–¥—Ä–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≤–∏–¥–µ–æ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –û–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø–ª–æ—Ç–Ω–æ–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ
    –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.
    """

    def __init__(self, debug: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ CSK —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        self.x1 = None
        self.y1 = None
        self.height = None
        self.width = None

        self.eta = 0.075  # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        self.sigma = 0.2  # –®–∏—Ä–∏–Ω–∞ –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —è–¥—Ä–∞
        self.lmbda = 0.01  # –ü–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
        self.debug = debug
        self.our_fft = False

    def init(
            self,
            frame: np.ndarray,
            bounding_box: bounding_box_type,
    ) -> bool:
        """
         –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Å –ø–µ—Ä–≤—ã–º –∫–∞–¥—Ä–æ–º –∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Ä–∞–º–∫–æ–π.
        :param frame: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–¥—Ä –≤–∏–¥–µ–æ (—Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).
        :param bounding_box: –ò—Å—Ö–æ–¥–Ω–∞—è —Ä–∞–º–∫–∞ (x1, y1, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞).
        :return: True, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.
        """
        x1, y1, width, height = bounding_box
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ bbox
        self.x1 = x1
        self.y1 = y1

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —á–µ—Ç–Ω—ã–º–∏
        self.width = width if width % 2 == 0 else width - 1
        self.height = height if height % 2 == 0 else height - 1

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
        self.x = self.crop(frame, x1, y1, self.width, self.height)

        # –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –æ—Ç–∫–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É–∂–∏—Ç —ç—Ç–∞–ª–æ–Ω–æ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        self.y = self.target(self.width, self.height)
        if self.debug:
            cv2.imshow('Gauss feedback map', self.y)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã –æ—Ç–∫–ª–∏–∫–∞
        # –ù–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∏–∫–∞ y (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.
        # self.prev —Ö—Ä–∞–Ω–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–∞ y
        self.prev = np.unravel_index(
            np.argmax(self.y, axis=None), self.y.shape
        )  # –ü–æ–∑–∏—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç—ã –æ—Ç–∫–ª–∏–∫–∞
        if self.debug:
            print(f"–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.prev}")

        # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ ùõº, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑—ã–≤–∞–µ—Ç ROI (x) —Å –∫–∞—Ä—Ç–æ–π –æ—Ç–∫–ª–∏–∫–∞ (y).
        self.alphaf = self.training(self.x, self.y, self.sigma, self.lmbda)
        return True

    def update(self, frame: np.ndarray) -> (bool, bounding_box_type):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞ —Å –Ω–æ–≤—ã–º –∫–∞–¥—Ä–æ–º.
        :param frame: –¢–µ–∫—É—â–∏–π –∫–∞–¥—Ä –≤–∏–¥–µ–æ.
        :return: (bool, bounding_box_type): –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–∞–º–∫–∞ (x1, y1, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞).
        """

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if self.x1 is None or self.y1 is None or self.width is None or self.height is None:
            return False, None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        z = self.crop(frame, self.x1, self.y1, self.width, self.height)

        # –°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç—É –æ—Ç–∫–ª–∏–∫–∞ responses,
        # –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–º —Å–¥–≤–∏–≥–µ ROI
        responses = self.detection(self.alphaf, self.x, z, self.sigma)

        # –ò—â–µ–º –ø–∏–∫ –∫–∞—Ä—Ç—ã –æ—Ç–∫–ª–∏–∫–∞, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        # np.argmax(responses) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–∏–∫–∞ –∫–∞—Ä—Ç—ã –æ—Ç–∫–ª–∏–∫–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ).
        # np.unravel_index –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (y, x).
        curr = np.unravel_index(np.argmax(responses, axis=None), responses.shape)
        # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π curr –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π prev –¥–∞—ë—Ç —Å–º–µ—â–µ–Ω–∏–µ
        dy = curr[0] - self.prev[0]
        dx = curr[1] - self.prev[1]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ —Å —É—á—ë—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
        self.x1 = self.x1 - dx
        self.y1 = self.y1 - dy
        if self.debug:
            print(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞: ({self.x1}, {self.y1})")

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–æ–≤–∞—è —Ä–∞–º–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞–¥—Ä–∞
        if self.x1 < 0:
            self.x1 = 0
        if self.y1 < 0:
            self.y1 = 0
        if self.x1 + self.width > frame.shape[1]:
            self.x1 = frame.shape[1] - self.width
        if self.y1 + self.height > frame.shape[0]:
            self.y1 = frame.shape[0] - self.height

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ –∫–∞–¥—Ä–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        xtemp = self.eta * self.crop(frame, self.x1, self.y1, self.width, self.height) + (1 - self.eta) * self.x

        # –í—ã—Ä–µ–∑–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–¥—Ä
        self.x = self.crop(frame, self.x1, self.y1, self.width, self.height)
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Å –Ω–æ–≤—ã–º –∫–∞–¥—Ä–æ–º –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        self.alphaf = (self.eta * self.training(self.x, self.y, self.sigma, self.lmbda)
                       + (1 - self.eta) * self.alphaf)  # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –æ–ø–æ—Ä–Ω—ã–π –∫–∞–¥—Ä
        self.x = xtemp

        return True, (self.x1, self.y1, self.width, self.height)

    def dgk(self, x1: np.ndarray, x2: np.ndarray, sigma: float):
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ–≥–æ –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —è–¥—Ä–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        :param x1: –ü–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        :param x2: –í—Ç–æ—Ä–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        :param sigma: –®–∏—Ä–∏–Ω–∞ —è–¥—Ä–∞ –≥–∞—É—Å—Å–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
        :return: –ú–∞—Ç—Ä–∏—Ü–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ —è–¥—Ä–∞.
        """
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —á–µ—Ä–µ–∑ FFT
        # np.fft.fft2(x1) –∏ np.fft.fft2(x2) –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç –¥–≤—É–º–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ —á–∞—Å—Ç–æ—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å.
        # np.conj(np.fft.fft2(x2)) –±–µ—Ä—ë—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–æ–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è x2, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∑–∞–∏–º–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        # np.fft.ifft2(...) –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å.
        # np.fft.fftshift(...) —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Å–¥–≤–∏–≥–∞–º.
        if self.our_fft:
            c = np.fft.fftshift(ifft_2d(fft_2d(x1) * np.conj(fft_2d(x2))))
        else:
            c = np.fft.fftshift(np.fft.ifft2(np.fft.fft2(x1) * np.conj(np.fft.fft2(x2))))

        #  –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        d = (
                np.dot(np.conj(x1.flatten(order='K')), x1.flatten(order='K')) +
                np.dot(np.conj(x2.flatten(order='K')), x2.flatten(order='K')) -
                2 * c
        )
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏—è –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —è–¥—Ä–∞
        k = np.exp(-1 / sigma ** 2 * np.abs(d) / np.size(x1))
        # d –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ ROI np.size(x1),
        # —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è –±—ã–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞.
        # –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≥–∞—É—Å—Å–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏—è —è–¥—Ä–∞
        # –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è d –¥–∞—é—Ç –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è k (–±–ª–∏–∑–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã).
        # –ë–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è d –¥–∞—é—Ç –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è k (–¥–∞–ª—å–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã).

        return k

    def training(self, x, y, sigma, lmbda):
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.
        –†–µ—à–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π —è–¥—Ä–∞.

        :param x: –í—Ö–æ–¥–Ω–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç.
        :param y: –ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞ —Ü–µ–ª–∏.
        :param sigma: –®–∏—Ä–∏–Ω–∞ —è–¥—Ä–∞ –≥–∞—É—Å—Å–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
        :param lmbda: –ü–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏.
        :return: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
        """
        # –Ω–∞—Ö–æ–¥–∏–º k, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ö–æ–¥—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è x —Å –µ–≥–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–¥–≤–∏–≥–∞–º–∏.
        k = self.dgk(x, x, sigma)

        # –ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞ y –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —á–∞—Å—Ç–æ—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å —á–µ—Ä–µ–∑ FFT
        # –ú–∞—Ç—Ä–∏—Ü–∞ —è–¥—Ä–∞ k —Ç–∞–∫–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ FFT
        # –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        # –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ–±—ä–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        if self.our_fft:
            alphaf = fft_2d(y) / (fft_2d(k) + lmbda)
        else:
            alphaf = np.fft.fft2(y) / (np.fft.fft2(k) + lmbda)

        return alphaf

    def detection(self, alphaf: np.ndarray, x: np.ndarray, z: np.ndarray, sigma: float) -> np.ndarray:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—É—Ç–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –æ—Ç–∫–ª–∏–∫–æ–≤.

        :param alphaf: –ú–æ–¥–µ–ª—å –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.
        :param x: –û–ø–æ—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç.
        :param z: –§—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
        :param sigma:  –®–∏—Ä–∏–Ω–∞ —è–¥—Ä–∞ –≥–∞—É—Å—Å–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
        :return: –ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤.
        """
        k = self.dgk(x, z, sigma)
        if self.our_fft:
            responses = np.real(ifft_2d(alphaf * fft_2d(k)))
        else:
            responses = np.real(np.fft.ifft2(alphaf * np.fft.fft2(k)))
        if self.debug:
            cv2.imshow('Gauss kernel', k)
            cv2.imshow('The reference fragment of the search', x)
            cv2.imshow('The current search fragment', z)
            cv2.imshow('Responses map', responses)
        return responses

    def window(self, img: np.ndarray) -> np.ndarray:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫—Ä–∞–µ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.

        :param img: –í—Ö–æ–¥–Ω–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        :return: –§—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –æ–∫–Ω–∞.
        """
        height = img.shape[0]
        width = img.shape[1]

        j = np.arange(0, width)
        i = np.arange(0, height)

        # —Å–æ–∑–¥–∞—ë—Ç –¥–≤—É–º–µ—Ä–Ω—ã–µ —Å–µ—Ç–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤, –≥–¥–µ
        # J[i, j] - –∏–Ω–¥–µ–∫—Å j-–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        # I[i, j] - –∏–Ω–¥–µ–∫—Å i-–æ–π —Å—Ç—Ä–æ–∫–∏
        J, I = np.meshgrid(j, i)

        # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –æ–∫–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤–µ—Å—ã –∫ –ø–∏–∫—Å–µ–ª—è–º, —É–º–µ–Ω—å—à–∞—è –≤–ª–∏—è–Ω–∏–µ –∫—Ä–∞—ë–≤.
        window = np.sin(np.pi * J / width) * np.sin(np.pi * I / height)
        # –ü–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—ë—Ç –¥–≤—É–º–µ—Ä–Ω–æ–µ –æ–∫–Ω–æ, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–∫–∏ –∫ 0 –ø–æ –∫—Ä–∞—è–º –∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –º–∞–∫—Å–∏–º—É–º–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ.
        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        windowed = window * ((img / 255) - 0.5)

        return windowed

    def crop(self, img: np.ndarray, x1: float, y1: float, width: int, height: int) -> np.ndarray:
        """
        –í—ã—Ä–µ–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –∑–∞–¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.

        :param img: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–¥—Ä.
        :param x1: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ x.
        :param y1: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ y.
        :param width:
        :param height:
        :return: –í—ã—Ä–µ–∑–∞–Ω–Ω—ã–π –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """

        #  –°–æ–∑–¥–∞—é—Ç—Å—è –º–∞—Å—Å–∏–≤—ã pad_y –∏ pad_x –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç—Å—Ç—É–ø–æ–≤ (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ –∏ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ),
        #  –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        pad_y = [0, 0]
        pad_x = [0, 0]

        # –†–∞—Å—á—ë—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞
        # –ï—Å–ª–∏ y1‚àíheight/2 (–≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π –æ–±–ª–∞—Å—Ç–∏) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞–¥—Ä–∞ (<0), —Ç–æ –≥—Ä–∞–Ω–∏—Ü–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ 0
        if (y1 - height / 2) < 0:
            y_up = 0
            # –†–∞–∑–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ pad_y[0], —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ä–µ–∑–∫—É –æ—Ç—Å—Ç—É–ø–æ–º –ø–æ–∑–∂–µ
            pad_y[0] = int(-(y1 - height / 2))
        else:
            y_up = int(y1 - height / 2)

        # –†–∞—Å—á—ë—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞, –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–∞—Å—á—ë—Ç—É
        if (y1 + 3 * height / 2) > img.shape[0]:
            y_down = img.shape[0]
            pad_y[1] = int((y1 + 3 * height / 2) - img.shape[0])
        else:
            y_down = int(y1 + 3 * height / 2)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –≤—ã—Ä–µ–∑–∫–∏ –ø–æ –æ—Å–∏ X
        if (x1 - width / 2) < 0:
            x_left = 0
            pad_x[0] = int(-(x1 - width / 2))
        else:
            x_left = int(x1 - width / 2)

        if (x1 + 3 * width / 2) > img.shape[1]:
            x_right = img.shape[1]
            pad_x[1] = int((x1 + 3 * width / 2) - img.shape[1])
        else:
            x_right = int(x1 + 3 * width / 2)

        # –í—ã—Ä–µ–∑–∞–µ–º —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cropped = img[y_up:y_down, x_left:x_right]
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ—Ç—Ç–µ–Ω–∫–∞–º —Å–µ—Ä–æ–≥–æ
        cropped = cv2.cvtColor(cropped, cv2.COLOR_BGR2GRAY)

        # –î–æ–ø–æ–ª–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        # np.pad –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø—ã: pad_y[0] –∏ pad_y[1] –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É,
        # pad_x[0] –∏ pad_x[1] –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
        # –ú–µ—Ç–æ–¥ 'edge' –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        padded = np.pad(cropped, (pad_y, pad_x), 'edge')

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ –æ–∫–Ω–∞
        windowed = self.window(padded)
        return windowed

    def target(self, width: int, height: int) -> np.ndarray:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∞—É—Å—Å–æ–≤–æ–π —Ñ–æ—Ä–º—ã –∫–∞—Ä—Ç—ã –æ—Ç–∫–ª–∏–∫–∞.

        :param width: –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ —Ü–µ–ª–∏.
        :param height: –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —Ü–µ–ª–∏.
        :return:
        """
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –æ—Ç–∫–ª–∏–∫–∞ –≤–¥–≤–æ–µ –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤—ã—Å–æ—Ç–µ
        # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–¥–≤–∏–≥–∏ ROI –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ CSK, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞ —Ü–∏—Ä–∫—É–ª—è–Ω—Ç–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü.
        double_height = 2 * height
        double_width = 2 * width

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        s = np.sqrt(double_height * double_width) / 16

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        # np.arange(0, double_width) —Å–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ j.
        j = np.arange(0, double_width)
        # np.arange(0, double_height) —Å–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ i.
        i = np.arange(0, double_height)
        # np.meshgrid(j, i) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã J –∏ I
        # J[i, j] —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –æ—Å–∏ X
        # I[i, j] —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –æ—Å–∏ Y
        J, I = np.meshgrid(j, i)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ì–∞—É—Å—Å–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        y = np.exp(-((J - width) ** 2 + (I - height) ** 2) / s ** 2)

        return y
